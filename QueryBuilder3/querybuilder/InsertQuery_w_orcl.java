/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package querybuilder;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import static querybuilder.SelectQuery_w_orcl.getConn;
import static querybuilder.SelectQuery_w_orcl.setConn;


/**
 *
 * @author vikas
 */
public class InsertQuery_w_orcl extends javax.swing.JPanel {

    private static Connection conn;

    /**
     * @return the conn
     */
    public static Connection getConn() {
        return conn;
    }

    /**
     * @param aConn the conn to set
     */
    public static void setConn(Connection aConn) {
        conn = aConn;
    }
    private ResultSet rs;
    private PreparedStatement pstmt,pstmt_schema,pstmt_table,pstmt_field;
    private int column_count;
    private ResultSetMetaData rsmd;
    //private DefaultTableModel tbmod;
    private int first_tim_in=1;
    private int store_col_count;
    private String filename="";
    private DefaultTableModel tbmod;
    private Vector<JPanel> panelvec;
    private JTextField text;
    private DatePanel1 dp;
    private TextPanel tp;
    private AttachPanel1 ap;
    
    public InsertQuery_w_orcl() {
        initComponents();
        panelvec=new Vector<>();
        try 
        {
            if(StartWindow.getDatabase_string().equals("MySQL"))
            {
                setConn(QBPanel1.getConn());
                //add value to schema combobox
                pstmt_schema=conn.prepareStatement("show schemas");
		ResultSet rs_schema=pstmt_schema.executeQuery();
		while(rs_schema.next())
		{
                    schema.addItem(rs_schema.getString(1));
		    //subschemacombo.addItem(rs_schema.getString(1));
                    System.out.println(rs_schema.getString(1));
		}
            }
            else if(StartWindow.getDatabase_string().equals("ORACLE"))
            {
                schemalb.setVisible(false);
                schema.setVisible(false);
                setConn(QBPanel1.getConn());
                //add value to schema combobox
                pstmt_schema=conn.prepareStatement("select table_name from user_tables where tablespace_name='SYSTEM' AND table_name not like '%$%' AND table_name not like '%$' AND table_name not like '$%'  AND table_name!='HELP' AND table_name!='SQLPLUS_PRODUCT_PROFILE'");
		ResultSet rs_schema=pstmt_schema.executeQuery();
		while(rs_schema.next())
		{
                    table.addItem(rs_schema.getString(1));
		    //subschemacombo.addItem(rs_schema.getString(1));
                    System.out.println(rs_schema.getString(1));
		}
            } 
            else if(StartWindow.getDatabase_string().equals("MS-Access"))
            {
                schemalb.setVisible(false);
                schema.setVisible(false);
                setConn(QBPanel1.getConn());
                DatabaseMetaData md=getConn().getMetaData();
                ResultSet rs_schema=md.getTables(null, null, "%", null);
                String temp="";
                while(rs_schema.next())
                {
                    temp = rs_schema.getString(3);
                    if(!temp.contains("MSys"))
                    {
                        table.addItem(temp);                
                        System.out.println(temp);
                    }                                        
		}
            }
            
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        schema = new javax.swing.JComboBox();
        err_msg = new javax.swing.JLabel();
        insertBtn = new javax.swing.JButton();
        schemalb = new javax.swing.JLabel();
        table = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        fieldPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Insert Query", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 16))); // NOI18N
        setAutoscrolls(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel2.setText("Select Table");

        schema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schemaActionPerformed(evt);
            }
        });

        err_msg.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        err_msg.setForeground(new java.awt.Color(51, 51, 255));

        insertBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        insertBtn.setText("Insert");
        insertBtn.setAutoscrolls(true);
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        schemalb.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        schemalb.setText("Select Schema");

        table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableActionPerformed(evt);
            }
        });

        fieldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Insert Data", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 14))); // NOI18N
        fieldPanel.setLayout(new javax.swing.BoxLayout(fieldPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(fieldPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(schemalb, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(schema, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(58, 58, 58)
                                .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(err_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(insertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(schemalb))
                    .addComponent(schema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2))
                    .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(err_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void schemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemaActionPerformed
        try {
            System.out.println("schema combo");
            table.removeAllItems();
            String schema_name=schema.getSelectedItem().toString();
            //add all table name to tablecomb combobox from vikas schema
            pstmt_table=getConn().prepareStatement("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA=?");
            pstmt_table.setString(1, schema_name);
            ResultSet rs_table=pstmt_table.executeQuery();
            //remove all element before add
            //table.removeAllItems();//this will remove all item from table

            while(rs_table.next())
            {
                table.addItem(rs_table.getString(1));
                System.out.println(rs_table.getString(1));
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_schemaActionPerformed
//
//    public void playSound()
//    {
//        InputStream in;
//        try 
//        {
//            in=new FileInputStream(new File("C:\\Users\\VIKAS\\Downloads\\Music\\rowinsert.wav"));
//            AudioStream audios=new AudioStream(in);
//            AudioPlayer.player.start(audios);
//        }
//        catch (Exception e) 
//        {
//            e.printStackTrace();
//        }
//    }
    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        try
        {
            String insertvalue="";
            String tablename="";

            for(int i=0;i<panelvec.size();i++)
            {
                if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("DATE"))
                {
                    DatePanel1 dp=(DatePanel1) panelvec.get(i);
                    tablename=tablename+dp.getLabel().getText()+",";
                }
                else if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGTEXT"))
                {
                    AttachPanel1 ap=(AttachPanel1) panelvec.get(i);
                    tablename=tablename+ap.getLabel().getText()+",";
                }
                else
                {
                    TextPanel tp=(TextPanel) panelvec.get(i);
                    tablename=tablename+tp.getLabel().getText()+",";
                }
            }
            tablename=tablename.substring(0, tablename.length()-1);
            System.out.println(tablename+"oooooooooooooooooooo");
            for(int i=0;i<panelvec.size();i++)
            {
                //                DatePanel1 dp=null;
                //                TextPanel tp=null;
                String textf=" ";
                String textfield=" ";
                if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("DATE"))
                {
                    dp=(DatePanel1) panelvec.get(i);
                    text=(JTextField)dp.getDate().getDateEditor().getUiComponent();
                    textfield=text.getText();
                }
                else if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGTEXT"))
                {
                    ap=(AttachPanel1) panelvec.get(i);
                    textf=ap.getTextfield().getText();
                }
                else
                {
                    tp=(TextPanel) panelvec.get(i);
                    textf=tp.getTextfield().getText();
                }
                if(textf.equals("") || textfield.equals(""))
                {
                    if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("DATE"))
                    {
                        insertvalue=insertvalue+null+",";
                    }
                    else if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGTEXT"))
                    {
                        insertvalue=insertvalue+null+",";
                    }
                    else
                    {
                        insertvalue=insertvalue+null+",";
                    }
                }
                else
                {
                    if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("DATE"))
                    {
                        //                        JTextField text=(JTextField)dp.getDate().getDateEditor().getUiComponent();
                        if(StartWindow.getDatabase_string().equals("MySQL"))
                        {
                            insertvalue=insertvalue+"'"+text.getText()+"'"+",";
                        }
                        else if(StartWindow.getDatabase_string().equals("ORACLE"))
                        {
                            insertvalue=insertvalue+"TO_DATE('"+text.getText()+"','dd/mm/yyyy')"+",";
                        }                        
                    }
                    else if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGTEXT"))
                    {
                        insertvalue=insertvalue+"'"+ap.getTextfield().getText()+"'"+",";
                    }
                    else if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("VARCHAR") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("VARCHAR2"))
                    {
                        insertvalue=insertvalue+"'"+tp.getTextfield().getText()+"'"+",";
                    }
                    else
                    {
                        insertvalue=insertvalue+tp.getTextfield().getText()+",";
                    }
                }
            }
            insertvalue=insertvalue.substring(0, insertvalue.length()-1);
            System.out.println(insertvalue);
            String table_full_name="";
            if(StartWindow.getDatabase_string().equals("MySQL"))
            {
                table_full_name=schema.getSelectedItem()+"."+table.getSelectedItem();
            }
            else if(StartWindow.getDatabase_string().equals("ORACLE"))
            {
                table_full_name=table.getSelectedItem().toString();
            }
            System.out.println("Insert Into "+table_full_name+" ( "+tablename+" )  Values  ( "+insertvalue+" ) ");
            pstmt=getConn().prepareStatement("Insert Into "+table_full_name+" ( "+tablename+" ) "+" Values "+" ( "+insertvalue+" ) ");
            int i=pstmt.executeUpdate();
            if(i==1)
            {
                QBPanel1.playSound("D:\\MyProject\\QueryBuilder3\\src\\Audio\\rowinsert.wav");
                JOptionPane.showMessageDialog(null, " row is insert . . .");
            }
            else
            {
                JOptionPane.showMessageDialog(null, " row is not insert . . .");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_insertBtnActionPerformed

    private void tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableActionPerformed
        try
        {     
            String table_full_name="";
            if(StartWindow.getDatabase_string().equals("MySQL"))
            {
                table_full_name=schema.getSelectedItem().toString()+"."+table.getSelectedItem().toString();
            }
            else if(StartWindow.getDatabase_string().equals("ORACLE") || StartWindow.getDatabase_string().equals("MS-Access"))
            {
                table_full_name=table.getSelectedItem().toString();
            }
            //add all table name to tablecomb combobox from vikas schema
            pstmt_field=getConn().prepareStatement("Select * from "+table_full_name);
            ResultSet rs_field=pstmt_field.executeQuery();
            rsmd=rs_field.getMetaData();
            column_count=rsmd.getColumnCount();
            System.out.println(rsmd.getColumnCount());
            if(first_tim_in >= 2)
            {
                for (int i = 1; i <= store_col_count; i++)
                {
                    System.out.println(" I am  in"+i);
                    fieldPanel.removeAll();
                    panelvec.removeAllElements();
                }
            }
            first_tim_in++;
            //field.removeAllItems();//remove all element

            for (int i = 1; i <= column_count; i++)
            {
                System.out.println(rsmd.getColumnName(i).toString());
//                tbmod.addRow(new Object[]{rsmd.getColumnName(i).toString(),""});                
                if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("DATE"))
                {
                    panelvec.addElement(new DatePanel1());                
                }
                else if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGTEXT"))
                {
                    panelvec.addElement(new AttachPanel1());                
                }
                else
                {
                    panelvec.addElement(new TextPanel());                
                }
                //add value to field
                //field.addItem(rsmd.getColumnName(i));
            }
            for (int i = 1; i <= column_count; i++)
            {               
                if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("DATE"))
                {
                    DatePanel1 p=(DatePanel1) panelvec.get(i-1);
                    p.getLabel().setText(rsmd.getColumnName(i).toString());
                    fieldPanel.add(p);
                    fieldPanel.repaint();
                    fieldPanel.revalidate();
                }
                else if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGTEXT"))
                {
                    AttachPanel1 p=(AttachPanel1) panelvec.get(i-1);
                    p.getLabel().setText(rsmd.getColumnName(i).toString());
                    fieldPanel.add(p);
                    fieldPanel.repaint();
                    fieldPanel.revalidate();
                }
                else
                {
                    TextPanel p=(TextPanel) panelvec.get(i-1);
                    p.getLabel().setText(rsmd.getColumnName(i).toString());
                    fieldPanel.add(p);
                    fieldPanel.repaint();
                    fieldPanel.revalidate();
                }                
            }
            store_col_count=column_count;
            System.out.println("Store = "+store_col_count);
            //fieldtable.setModel(tbmod);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tableActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel err_msg;
    private javax.swing.JPanel fieldPanel;
    private javax.swing.JButton insertBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox schema;
    private javax.swing.JLabel schemalb;
    private javax.swing.JComboBox table;
    // End of variables declaration//GEN-END:variables
}
