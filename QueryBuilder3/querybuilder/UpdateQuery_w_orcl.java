/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package querybuilder;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;


/**
 *
 * @author vikas
 */
public class UpdateQuery_w_orcl extends javax.swing.JPanel {

    private static Connection conn;

    /**
     * @return the conn
     */
    public static Connection getConn() {
        return conn;
    }

    /**
     * @param aConn the conn to set
     */
    public static void setConn(Connection aConn) {
        conn = aConn;
    }
    private ResultSet rs;
    private PreparedStatement pstmt,pstmt_schema,pstmt_table,pstmt_field;
    private int column_count;
    private ResultSetMetaData rsmd;
    private int first_tim_in=1;
    private int store_col_count;
    private Vector<JPanel> panelvec;
    private String logic="";//for AND , OR condition
    private String op="";
    
    public UpdateQuery_w_orcl() {
        initComponents();
        panelvec=new Vector<>();
        try {
            if(StartWindow.getDatabase_string().equals("MySQL"))
            {
                setConn(QBPanel1.getConn());
                //add value to schema combobox
                pstmt_schema=conn.prepareStatement("show schemas");
		ResultSet rs_schema=pstmt_schema.executeQuery();
		while(rs_schema.next())
		{
                    schema.addItem(rs_schema.getString(1));
		    //subschemacombo.addItem(rs_schema.getString(1));
                    System.out.println(rs_schema.getString(1));
		}
            }
            else if(StartWindow.getDatabase_string().equals("ORACLE"))
            {
                schemalb.setVisible(false);
                schema.setVisible(false);
                setConn(QBPanel1.getConn());
                //add value to schema combobox
                pstmt_schema=conn.prepareStatement("select table_name from user_tables where tablespace_name='SYSTEM' AND table_name not like '%$%' AND table_name not like '%$' AND table_name not like '$%'  AND table_name!='HELP' AND table_name!='SQLPLUS_PRODUCT_PROFILE'");
		ResultSet rs_schema=pstmt_schema.executeQuery();
		while(rs_schema.next())
		{
                    table.addItem(rs_schema.getString(1));
		    //subschemacombo.addItem(rs_schema.getString(1));
                    System.out.println(rs_schema.getString(1));
		}
            } 
            else if(StartWindow.getDatabase_string().equals("MS-Access"))
            {
                schemalb.setVisible(false);
                schema.setVisible(false);
                setConn(QBPanel1.getConn());
                DatabaseMetaData md=getConn().getMetaData();
                ResultSet rs_schema=md.getTables(null, null, "%", null);
                String temp="";
                while(rs_schema.next())
                {
                    temp = rs_schema.getString(3);
                    if(!temp.contains("MSys"))
                    {
                        table.addItem(temp);                
                        System.out.println(temp);
                    }                                        
		}
            }
        } 
        catch (Exception e) 
        {
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        andBtn2 = new javax.swing.JButton();
        oprator = new javax.swing.JComboBox();
        orBtn2 = new javax.swing.JButton();
        rest_txt = new javax.swing.JTextField();
        field = new javax.swing.JComboBox();
        updateBtn = new javax.swing.JButton();
        err_msg = new javax.swing.JLabel();
        schemalb = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        table = new javax.swing.JComboBox();
        schema = new javax.swing.JComboBox();
        fieldPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Update Query", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel4.setBackground(new java.awt.Color(255, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Where Clause", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 16))); // NOI18N

        andBtn2.setText("AND");
        andBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andBtnActionPerformed(evt);
            }
        });

        oprator.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        oprator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "!=", ">", "<", ">=", "<=" }));
        oprator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opratorActionPerformed(evt);
            }
        });

        orBtn2.setText("OR");
        orBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(field, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(oprator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(orBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(andBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(rest_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(20, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oprator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rest_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orBtn2)
                    .addComponent(andBtn2))
                .addContainerGap())
        );

        updateBtn.setText("Update Table");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        err_msg.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        err_msg.setForeground(new java.awt.Color(51, 51, 255));

        schemalb.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        schemalb.setText("Select Schema");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel2.setText("Select Table");

        table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableActionPerformed(evt);
            }
        });

        schema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schemaActionPerformed(evt);
            }
        });

        fieldPanel.setBackground(new java.awt.Color(0, 102, 102));
        fieldPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Insert Data", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 14), new java.awt.Color(255, 204, 204))); // NOI18N
        fieldPanel.setLayout(new javax.swing.BoxLayout(fieldPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(updateBtn)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(5, 5, 5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(err_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(schemalb, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(schema, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(58, 58, 58)
                        .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(schemalb))
                    .addComponent(schema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2))
                    .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(fieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateBtn)
                .addGap(18, 18, 18)
                .addComponent(err_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        try
        {
            String setvalue="";
            for(int i=0;i<panelvec.size();i++)
            {
                String textf=" ";
                String textfield=" ";
                if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("DATE"))
                {
                    DatePanel1 dp=(DatePanel1) panelvec.get(i);
                    JTextField text = (JTextField)dp.getDate().getDateEditor().getUiComponent();
                    textfield=text.getText();
                    if(!textfield.equals(""))
                    {
                        setvalue=setvalue+dp.getLabel().getText()+" = "+"'"+textfield+"'"+",";
                    }                    
                }
                else if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("LONGTEXT"))
                {
                    AttachPanel1 ap=(AttachPanel1) panelvec.get(i);
                    if(!ap.getTextfield().getText().equals(""))
                    {
                        setvalue=setvalue+ap.getLabel().getText()+" = "+"'"+ap.getTextfield().getText()+"'"+",";
                    }
                }
                else if(rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("VARCHAR") || rsmd.getColumnTypeName(i+1).toString().equalsIgnoreCase("VARCHAR2"))
                {
                    TextPanel tp=(TextPanel) panelvec.get(i);
                    if(!tp.getTextfield().getText().equals(""))
                    {
                        setvalue=setvalue+tp.getLabel().getText()+" = "+"'"+tp.getTextfield().getText()+"'"+",";
                    }
                }
                else
                {
                    TextPanel tp=(TextPanel) panelvec.get(i);
                    if(!tp.getTextfield().getText().equals(""))
                    {
                        setvalue=setvalue+tp.getLabel().getText()+" = "+tp.getTextfield().getText()+",";
                    }
                }
            }
            setvalue=setvalue.substring(0, setvalue.length()-1);
            System.out.print(setvalue);

            op="";
            if(rsmd.getColumnTypeName(field.getSelectedIndex()+1).equals("VARCHAR") || rsmd.getColumnTypeName(field.getSelectedIndex()+1).equals("VARCHAR2"))
            {
                System.out.println("mmmmmmmmmmmmmmmmm");
                logic=logic+field.getSelectedItem().toString()+" "+oprator.getSelectedItem().toString()+" "+"'"+rest_txt.getText()+"'";
            }
            else
            {
                logic=logic+field.getSelectedItem().toString()+" "+oprator.getSelectedItem().toString()+" "+rest_txt.getText();
            }
            System.out.println(logic);
            String table_full_name="";
            if(StartWindow.getDatabase_string().equals("MySQL"))
            {
                table_full_name=schema.getSelectedItem()+"."+table.getSelectedItem();
            }
            else if(StartWindow.getDatabase_string().equals("ORACLE") || StartWindow.getDatabase_string().equals("MS-Access"))
            {
                table_full_name=table.getSelectedItem().toString();
            }
            System.out.println("Update "+table_full_name+" set "+setvalue+" where "+logic);
            pstmt=getConn().prepareStatement("Update "+table_full_name+" set "+setvalue+" where "+logic);
            int i=pstmt.executeUpdate();
            if(i==1)
            {             
                QBPanel1.playSound("D:\\MyProject\\QueryBuilder3\\src\\Audio\\rowupdate.wav");
                JOptionPane.showMessageDialog(null, " row is updated . . .");
                QBPanel1.setQueryString("Update "+table_full_name+" set "+setvalue+" where "+logic);
            }
            else
            {
                JOptionPane.showMessageDialog(null, " row is not updated . . .");
                QBPanel1.setQueryString("Update "+table_full_name+" set "+setvalue+" where "+logic);
            }
            logic="";//this will clear previous data to  added with new data (Exception)
            //fname='vikas'fname='onkar' this error
            //Reset All Component           
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            logic="";
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void orBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orBtnActionPerformed
        if(field.getSelectedItem()==null || rest_txt.getText().equals(""))
        {
            err_msg.setText("Plz Select Field & Text Field ...");
            return;
        }
        try 
        {
                if(rsmd.getColumnTypeName(field.getSelectedIndex()+1).equals("VARCHAR") || rsmd.getColumnTypeName(field.getSelectedIndex()+1).equals("VARCHAR2"))
                {
                    System.out.println("mmmmmmmmmmmmmmmmm");
                    logic=logic+field.getSelectedItem().toString()+" "+oprator.getSelectedItem().toString()+" "+"'"+rest_txt.getText()+"'";
                }
                else
                {
                    logic=logic+field.getSelectedItem().toString()+" "+oprator.getSelectedItem().toString()+" "+rest_txt.getText();
                }
        }
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        op=" OR ";
        logic=logic+op;
        rest_txt.setText("");
        field.setSelectedIndex(0);
    }//GEN-LAST:event_orBtnActionPerformed

    private void opratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opratorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opratorActionPerformed

    private void andBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andBtnActionPerformed
        if(field.getSelectedItem()==null || rest_txt.getText().equals(""))
        {
            err_msg.setText("Plz Select Field & Text Field ...");
            return;
        }
        try 
        {
                if(rsmd.getColumnTypeName(field.getSelectedIndex()+1).equals("VARCHAR") || rsmd.getColumnTypeName(field.getSelectedIndex()+1).equals("VARCHAR2"))
                {
                    System.out.println("mmmmmmmmmmmmmmmmm");
                    logic=logic+field.getSelectedItem().toString()+" "+oprator.getSelectedItem().toString()+" "+"'"+rest_txt.getText()+"'";
                }
                else
                {
                    logic=logic+field.getSelectedItem().toString()+" "+oprator.getSelectedItem().toString()+" "+rest_txt.getText();
                }
        }
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        op=" AND ";
        logic=logic+op;
        rest_txt.setText("");
        field.setSelectedIndex(0);
    }//GEN-LAST:event_andBtnActionPerformed

    private void tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableActionPerformed
        try
        {                      
//            String table_name=table.getSelectedItem().toString();
//            String schema_name=schema.getSelectedItem().toString();
//            //            innertable.setText(table_name);
//            //add all table name to tablecomb combobox from vikas schema
//            pstmt_field=getConn().prepareStatement("Select * from "+schema_name+"."+table_name);
            if(StartWindow.getDatabase_string().equals("MySQL"))
            {
                pstmt_field=getConn().prepareStatement("select * from "+schema.getSelectedItem()+"."+table.getSelectedItem());
            }
            else if(StartWindow.getDatabase_string().equals("ORACLE") || StartWindow.getDatabase_string().equals("MS-Access"))
            {
                pstmt_field=getConn().prepareStatement("select * from "+table.getSelectedItem().toString());
            }
            ResultSet rs_field=pstmt_field.executeQuery();
            rsmd=rs_field.getMetaData();
            column_count=rsmd.getColumnCount();
            System.out.println(rsmd.getColumnCount());
            if(first_tim_in >= 2)
            {
                for (int i = 1; i <= store_col_count; i++)
                {
                    System.out.println(" I am  in"+i);
                    fieldPanel.removeAll();
                    panelvec.removeAllElements();
                }
            }
            first_tim_in++;
            field.removeAllItems();//remove all element

            for (int i = 1; i <= column_count; i++)
            {
                System.out.println(rsmd.getColumnName(i).toString());
                //                tbmod.addRow(new Object[]{rsmd.getColumnName(i).toString(),""});
                if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("DATE"))
                {
                    panelvec.addElement(new DatePanel1());
                }
                else if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGTEXT"))
                {
                    panelvec.addElement(new AttachPanel1());
                }
                else
                {
                    panelvec.addElement(new TextPanel());
                }
                //add value to field
                //field.addItem(rsmd.getColumnName(i));
            }
            for (int i = 1; i <= column_count; i++)
            {
                if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("DATE"))
                {
                    DatePanel1 p=(DatePanel1) panelvec.get(i-1);
                    p.getLabel().setText(rsmd.getColumnName(i).toString());
                    fieldPanel.add(p);
                    fieldPanel.repaint();
                    fieldPanel.revalidate();
                }
                else if(rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGBLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("BLOB") || rsmd.getColumnTypeName(i).toString().equalsIgnoreCase("LONGTEXT"))
                {
                    AttachPanel1 p=(AttachPanel1) panelvec.get(i-1);
                    p.getLabel().setText(rsmd.getColumnName(i).toString());
                    fieldPanel.add(p);
                    fieldPanel.repaint();
                    fieldPanel.revalidate();
                }
                else
                {
                    TextPanel p=(TextPanel) panelvec.get(i-1);
                    p.getLabel().setText(rsmd.getColumnName(i).toString());
                    fieldPanel.add(p);
                    fieldPanel.repaint();
                    fieldPanel.revalidate();
                }
                field.addItem(rsmd.getColumnName(i));
            }
            store_col_count=column_count;
            System.out.println("Store = "+store_col_count);
            //fieldtable.setModel(tbmod);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tableActionPerformed

    private void schemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemaActionPerformed
        try {
            System.out.println("schema combo");
            table.removeAllItems();
            String schema_name=schema.getSelectedItem().toString();
            //add all table name to tablecomb combobox from vikas schema
            pstmt_table=getConn().prepareStatement("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA=?");
            pstmt_table.setString(1, schema_name);
            ResultSet rs_table=pstmt_table.executeQuery();
            //remove all element before add
            //table.removeAllItems();//this will remove all item from table

            while(rs_table.next())
            {
                table.addItem(rs_table.getString(1));
                System.out.println(rs_table.getString(1));
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_schemaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton andBtn2;
    private javax.swing.JLabel err_msg;
    private javax.swing.JComboBox field;
    private javax.swing.JPanel fieldPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JComboBox oprator;
    private javax.swing.JButton orBtn2;
    private javax.swing.JTextField rest_txt;
    private javax.swing.JComboBox schema;
    private javax.swing.JLabel schemalb;
    private javax.swing.JComboBox table;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
