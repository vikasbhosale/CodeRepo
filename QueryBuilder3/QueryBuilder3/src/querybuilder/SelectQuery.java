/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package querybuilder;

import java.awt.Component;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author vikas
 */
public class SelectQuery extends javax.swing.JPanel {

    /**
     * Creates new form AcionPannel
     */
    private Connection conn;
    private ResultSet rs;
    private PreparedStatement pstmt,pstmt_schema,pstmt_table,pstmt_field;
    private int column_count;
    private DefaultListModel dim,dim2;
    private int justonce=1;
    private Vector vector,vector2;
    private String logic="";//for AND , OR condition
    private String op="";
    private String queryText="";
    private String orderText="";
    private JComboBox<String> col;
    public SelectQuery()
    {
        initComponents();
        vector=new Vector();
        vector2=new Vector();
        try {
//            Class.forName("com.mysql.jdbc.Driver");
//            conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/vikas", "root", "root");
            conn=QBPanel1.getConn();
            //add value to schema combobox
            pstmt_schema=conn.prepareStatement("show schemas");
            ResultSet rs_schema=pstmt_schema.executeQuery();
            while(rs_schema.next())
            {
          	schema.addItem(rs_schema.getString(1));
		System.out.println(rs_schema.getString(1));
            }
            //combobox in table cell
            String data[]={"AVG( )","COUNT( )","SUM( )","MAX( )","MIN( )"};
            JComboBox<String> fun=new JComboBox<>(data);
            TableColumn tc=table1.getColumnModel().getColumn(0);
            TableCellEditor tce=new DefaultCellEditor(fun);
            tc.setCellEditor(tce);
            //combobox in table cell           
            col=new JComboBox<>();
            
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        schema = new javax.swing.JComboBox();
        table = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        err_msg = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        andBtn1 = new javax.swing.JButton();
        oprator1 = new javax.swing.JComboBox();
        orBtn1 = new javax.swing.JButton();
        rest_txt1 = new javax.swing.JTextField();
        rest_field = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        groupByField = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        fun_field = new javax.swing.JComboBox();
        functionCombo = new javax.swing.JComboBox();
        havingOp = new javax.swing.JComboBox();
        havingValue = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        selectGroupBy = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        orderByField = new javax.swing.JComboBox();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        orderSelect = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderTextArea = new javax.swing.JTextArea();
        selectSqu = new javax.swing.JRadioButton();
        sequenceOfOrder = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedfield = new javax.swing.JList();
        Rshift = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        field = new javax.swing.JList();
        Lshift = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addAll = new javax.swing.JButton();
        removeAll = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        removeColumn = new javax.swing.JButton();
        addColumn = new javax.swing.JButton();
        selectExe = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(51, 51, 51));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Query", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 16), new java.awt.Color(255, 255, 255))); // NOI18N
        setForeground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Select Schema");

        schema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schemaActionPerformed(evt);
            }
        });

        table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select Table");

        jPanel4.setBackground(new java.awt.Color(255, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Restriction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 16))); // NOI18N

        andBtn1.setText("AND");
        andBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andBtn1ActionPerformed(evt);
            }
        });

        oprator1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        oprator1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "!=", ">", "<", ">=", "<=" }));
        oprator1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oprator1ActionPerformed(evt);
            }
        });

        orBtn1.setBackground(new java.awt.Color(255, 255, 255));
        orBtn1.setText("OR");
        orBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orBtn1ActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel28.setText("Field Name");

        jLabel29.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel29.setText("OP");

        jLabel30.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel30.setText("Value");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rest_field, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(orBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(andBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(oprator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rest_txt1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                .addGap(19, 19, 19))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rest_txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oprator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rest_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(andBtn1)
                    .addComponent(orBtn1))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Condition", jPanel4);

        jPanel3.setBackground(new java.awt.Color(255, 204, 102));

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel21.setText("Group By");

        jPanel7.setBackground(new java.awt.Color(153, 204, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Having Clause", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        functionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AVG", "COUNT", "SUM", "MIN", "MAX" }));

        havingOp.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        havingOp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "!=", ">", "<", ">=", "<=" }));
        havingOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                havingOpActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel22.setText("Value");

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel23.setText("OP");

        jLabel24.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel24.setText("Function");

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel25.setText("Field Name");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText(")");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setText("(");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(functionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel7)
                        .addGap(6, 6, 6)
                        .addComponent(fun_field, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(havingOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(havingValue)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fun_field, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(functionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                        .addComponent(havingValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(havingOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        selectGroupBy.setBackground(new java.awt.Color(0, 204, 204));
        selectGroupBy.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        selectGroupBy.setForeground(new java.awt.Color(102, 0, 102));
        selectGroupBy.setText("OFF");
        selectGroupBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectGroupByActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groupByField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99)
                        .addComponent(selectGroupBy)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(groupByField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectGroupBy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Group By", jPanel3);

        jPanel6.setBackground(new java.awt.Color(153, 204, 255));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel26.setText("Order By");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel27.setText("Sequence");

        orderSelect.setText("Select");
        orderSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderSelectActionPerformed(evt);
            }
        });

        orderTextArea.setColumns(20);
        orderTextArea.setRows(5);
        jScrollPane3.setViewportView(orderTextArea);

        selectSqu.setBackground(new java.awt.Color(153, 204, 255));

        sequenceOfOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ASC", "DESC" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(sequenceOfOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(selectSqu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(orderSelect))
                            .addComponent(orderByField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(76, 76, 76))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel26)
                    .addComponent(orderByField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectSqu, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel27)
                        .addComponent(orderSelect)
                        .addComponent(sequenceOfOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Order By", jPanel6);

        jTabbedPane1.setAutoscrolls(true);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jScrollPane2.setViewportView(selectedfield);

        Rshift.setText(">>");
        Rshift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RshiftActionPerformed(evt);
            }
        });

        field.setFocusCycleRoot(true);
        field.setFocusTraversalPolicyProvider(true);
        jScrollPane1.setViewportView(field);

        Lshift.setText("<<");
        Lshift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LshiftActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Selected Field");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Field in Table");

        addAll.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        addAll.setText("Add All");
        addAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAllActionPerformed(evt);
            }
        });

        removeAll.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        removeAll.setText("Remove All");
        removeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addAll, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(277, 277, 277)
                        .addComponent(removeAll))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Rshift)
                            .addComponent(Lshift))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(Rshift)
                        .addGap(26, 26, 26)
                        .addComponent(Lshift))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addAll)
                    .addComponent(removeAll))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Select Field", jPanel1);

        jPanel8.setBackground(new java.awt.Color(153, 153, 255));

        table1.setBackground(new java.awt.Color(153, 153, 0));
        table1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(0, 0, 0), new java.awt.Color(51, 0, 51), new java.awt.Color(153, 204, 255)));
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FUNCTION ", "Column Name", "Aliase Name", "DISTINCT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table1.setSelectionBackground(new java.awt.Color(51, 255, 255));
        table1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        table1.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(table1);

        removeColumn.setText("Remove Column");
        removeColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColumnActionPerformed(evt);
            }
        });

        addColumn.setText("Add Column");
        addColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColumnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(addColumn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeColumn)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeColumn)
                    .addComponent(addColumn))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Function", jPanel8);

        selectExe.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        selectExe.setText("Run");
        selectExe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectExeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(schema, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(56, 56, 56)
                        .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(err_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(selectExe, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel1))
                    .addComponent(schema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel2))
                    .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(err_msg, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectExe))
                .addContainerGap())
        );

        add(jPanel5);
    }// </editor-fold>//GEN-END:initComponents

    private void schemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemaActionPerformed
        try {
            
            System.out.println("schema combo");
            String schema_name=schema.getSelectedItem().toString();
            //add all table name to tablecomb combobox from vikas schema
            pstmt_table=conn.prepareStatement("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA=?");
            pstmt_table.setString(1, schema_name);
            ResultSet rs_table=pstmt_table.executeQuery();
            //remove all element before add
            table.removeAllItems();//this will remove all item from table

            while(rs_table.next())
            {
                table.addItem(rs_table.getString(1));
                System.out.println(rs_table.getString(1));
            }
            /*
            System.out.println("schema combo");
            String schema1=schema.getSelectedItem().toString();
            //add all table name to tablecomb combobox from vikas schema
            pstmt_table=conn.prepareStatement("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA=?");
            pstmt_table.setString(1, schema1);
            ResultSet rs_table=pstmt_table.executeQuery();
            //remove all element before add
            table.removeAllItems();//this will remove all item from table				
            field.removeAll();
            while(rs_table.next())
            {
                table.addItem(rs_table.getString(1));
                System.out.println(rs_table.getString(1));
            }*/
        } catch (Exception e) {
        }
    }//GEN-LAST:event_schemaActionPerformed

    private void selectExeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectExeActionPerformed
        try {
            
            String selectedfield_data="";
            System.out.println(selectedfield.getLastVisibleIndex());
            for (int i = 0; i < vector2.size(); i++) 
            {
                selectedfield_data=selectedfield_data+vector2.get(i).toString()+",";
            }            
            if(!selectedfield_data.equals(""))
                selectedfield_data=selectedfield_data.substring(0, selectedfield_data.length()-1);
            System.out.println(selectedfield_data);
            //for using Function
            String fun_string="";
            DefaultTableModel tbmod=(DefaultTableModel)table1.getModel();
            for(int i=0;i<table1.getRowCount();i++)
            {
                String fun=tbmod.getValueAt(i, 0).toString();
                fun=fun.substring(0, fun.length()-3);
                if((boolean)tbmod.getValueAt(i, 3))
                {
                    fun_string=fun_string+fun+"( DISTINCT "+tbmod.getValueAt(i, 1)+" ) AS "+tbmod.getValueAt(i, 2)+",";
                }
                else
                {
                    fun_string=fun_string+fun+"( "+tbmod.getValueAt(i, 1)+" ) AS "+tbmod.getValueAt(i, 2)+",";
                }
            }
            if(!fun_string.equals(""))
                fun_string=fun_string.substring(0, fun_string.length()-1);
            System.out.println(fun_string);
            if((rest_txt1.getText().equals("")) && (!orderTextArea.getText().equals("")) && !selectGroupBy.isSelected())
            {
                System.out.println("order by");
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" ORDER BY "+orderTextArea.getText());
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" ORDER BY "+orderTextArea.getText());
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" ORDER BY "+orderTextArea.getText());
                }
            }
            else if((!rest_txt1.getText().equals("")) && (!orderTextArea.getText().equals("")) && !selectGroupBy.isSelected())
            {
                System.out.println("order by and condition");
                op="";
                logic=logic+rest_field.getSelectedItem().toString()+" "+oprator1.getSelectedItem().toString()+" "+rest_txt1.getText();
                System.out.println(logic);
                queryText="Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic;
                QBPanel qb=new QBPanel();
                qb.setQuery(queryText);
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" ORDER BY "+orderTextArea.getText());
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" ORDER BY "+orderTextArea.getText());
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" ORDER BY "+orderTextArea.getText());
                }
            }
            else if((!rest_txt1.getText().equals("")) && (orderTextArea.getText().equals("")) && !selectGroupBy.isSelected())
            {
                System.out.println("condition");
                op="";
                logic=logic+rest_field.getSelectedItem().toString()+" "+oprator1.getSelectedItem().toString()+" "+rest_txt1.getText();
                System.out.println(logic);
                queryText="Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic;
                QBPanel qb=new QBPanel();
                qb.setQuery(queryText);
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic);
                    System.out.println("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic);
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic);
                    System.out.println("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic);
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic);
                    System.out.println("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic);
                }
            }
            else if((rest_txt1.getText().equals("")) && (!orderTextArea.getText().equals("")) && selectGroupBy.isSelected())
            {
                System.out.println("order by & Group By");
                String havingText="";
                if(!havingValue.getText().equals(""))
                {
                    havingText=functionCombo.getSelectedItem()+"("+fun_field.getSelectedItem()+")"+havingOp.getSelectedItem()+havingValue.getText();
                }
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                }
            }
            else if((!rest_txt1.getText().equals("")) && (!orderTextArea.getText().equals("")) && selectGroupBy.isSelected())
            {
                System.out.println("order by and condition & Group By");
                op="";
                logic=logic+rest_field.getSelectedItem().toString()+" "+oprator1.getSelectedItem().toString()+" "+rest_txt1.getText();
                System.out.println(logic);
                //for group By
                String havingText="";
                if(!havingValue.getText().equals(""))
                {
                    havingText=functionCombo.getSelectedItem()+"("+fun_field.getSelectedItem()+")"+havingOp.getSelectedItem()+havingValue.getText();
                }
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                    System.out.println("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText+" ORDER BY "+orderTextArea.getText());
                }
            }
            else if((!rest_txt1.getText().equals("")) && (orderTextArea.getText().equals("")) && selectGroupBy.isSelected())
            {
                System.out.println("condition & Group By");
                op="";
                logic=logic+rest_field.getSelectedItem().toString()+" "+oprator1.getSelectedItem().toString()+" "+rest_txt1.getText();
                System.out.println(logic);
                //for group By
                String havingText="";
                if(!havingValue.getText().equals(""))
                {
                    havingText=functionCombo.getSelectedItem()+"("+fun_field.getSelectedItem()+")"+havingOp.getSelectedItem()+havingValue.getText();
                }
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                    System.out.println("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                    System.out.println("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                    System.out.println("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" where "+logic+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                }
            }
            else if((rest_txt1.getText().equals("")) && (orderTextArea.getText().equals("")) && selectGroupBy.isSelected())
            {
                System.out.println(" Group By");
                op="";
                logic=logic+rest_field.getSelectedItem().toString()+" "+oprator1.getSelectedItem().toString()+" "+rest_txt1.getText();
                System.out.println(logic);
                //for group By
                String havingText="";
                if(!havingValue.getText().equals(""))
                {
                    havingText=functionCombo.getSelectedItem()+"("+fun_field.getSelectedItem()+")"+havingOp.getSelectedItem()+havingValue.getText();
                }
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                    System.out.println("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                    System.out.println("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                    System.out.println("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem()+" GROUP BY "+groupByField.getSelectedItem()+" "+havingText);
                }
            }
            else
            {
                queryText="Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem();
                QBPanel qb=new QBPanel();
                qb.setQuery(queryText);
                System.out.println("QBPqnn"+getQueryText());
                if(fun_string.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+" from "+schema.getSelectedItem()+"."+table.getSelectedItem());
                    System.out.println("Select "+selectedfield_data+","+fun_string+" form "+schema.getSelectedItem()+"."+table.getSelectedItem());
                }
                else if(selectedfield_data.equals(""))
                {
                    pstmt=conn.prepareStatement("Select "+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem());
                    System.out.println("Select "+selectedfield_data+","+fun_string+" form "+schema.getSelectedItem()+"."+table.getSelectedItem());
                }                    
                else
                {
                    pstmt=conn.prepareStatement("Select "+selectedfield_data+","+fun_string+" from "+schema.getSelectedItem()+"."+table.getSelectedItem());
                    System.out.println("Select "+selectedfield_data+","+fun_string+" form "+schema.getSelectedItem()+"."+table.getSelectedItem());
                }
            }
                    
            ResultSet rs_field=pstmt.executeQuery();
            ResultSetMetaData rsmd=rs_field.getMetaData();
            int no_of_column=rsmd.getColumnCount();
            //for row & column data
            Vector<String> column=new Vector<String>();
            for(int i=1;i<=no_of_column;i++)					
            {
                column.addElement(rsmd.getColumnLabel(i));
            }
            
            Vector<Object> row=new Vector<Object>();
            int row_count=0;
            while (rs_field.next())
            {
                row_count++;
                Vector<Object> data=new Vector<Object>(no_of_column);
                for(int i=1;i<=no_of_column;i++)
                {
                    data.addElement(rs_field.getObject(i));
                }
                row.addElement(data);
            }
            //table construction
            DefaultTableModel tm=new DefaultTableModel(row, column)
            {
                @Override
                public boolean isCellEditable(int row, int column) 
                {
                    //all cells false
                    return false;
                }
            };
            TableShow ts=new TableShow();
            ts.setVisible(true);
            ts.createTable(tm);
            
            logic="";//this will clear previous data to  added with new data (Exception)
            //fname='vikas'fname='onkar' this error
            //Reset All Component
//            schema.setSelectedIndex(0);
//            field.removeAll();
//            selectedfield.removeAll();
        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_selectExeActionPerformed
    public String getQueryText()
    {
        return queryText;
    }
    private void tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableActionPerformed
        try {
            field.removeAll();
            rest_field.removeAllItems();
            orderByField.removeAllItems();
            groupByField.removeAllItems();
            col.removeAllItems();
            String table_name=table.getSelectedItem().toString();
            String schema_name=schema.getSelectedItem().toString();
            //add all table name to tablecomb combobox from vikas schema
            pstmt_field=conn.prepareStatement("Select * from "+schema_name+"."+table_name);
            ResultSet rs_field=pstmt_field.executeQuery();
            ResultSetMetaData rsmd=rs_field.getMetaData();
            column_count=rsmd.getColumnCount();
            dim=new DefaultListModel();
            for(int i=1;i<=column_count;i++)
            {
                dim.addElement(rsmd.getColumnName(i));
                rest_field.addItem(rsmd.getColumnName(i));
                orderByField.addItem(rsmd.getColumnName(i));
                groupByField.addItem(rsmd.getColumnName(i));
                col.addItem(rsmd.getColumnName(i));
                System.out.println(rsmd.getColumnName(i));
            }
            field.setModel(dim);
            TableColumn tc2=table1.getColumnModel().getColumn(1);
            TableCellEditor tce2=new DefaultCellEditor(col);
            tc2.setCellEditor(tce2);
        } catch (SQLException ex) {
            Logger.getLogger(SelectQuery.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tableActionPerformed

    private void oprator1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oprator1ActionPerformed

    }//GEN-LAST:event_oprator1ActionPerformed

    private void andBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_andBtn1ActionPerformed
        if(rest_field.getSelectedItem()==null || rest_txt1.getText().equals(""))
        {
            err_msg.setText("Plz Select Field & Text Field ...");
            return;
        }
        logic=logic+rest_field.getSelectedItem().toString()+oprator1.getSelectedItem().toString()+rest_txt1.getText();
        op=" AND ";
        logic=logic+op;
        rest_txt1.setText("");
        rest_field.setSelectedIndex(0);
    }//GEN-LAST:event_andBtn1ActionPerformed

    private void orBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orBtn1ActionPerformed
        if(rest_field.getSelectedItem()==null || rest_txt1.getText().equals(""))
        {
            err_msg.setText("Plz Select Field & Text Field ...");
            return;
        }
        logic=logic+rest_field.getSelectedItem().toString()+oprator1.getSelectedItem().toString()+rest_txt1.getText();
        op=" OR ";
        logic=logic+op;
        rest_txt1.setText("");
        rest_field.setSelectedIndex(0);
    }//GEN-LAST:event_orBtn1ActionPerformed

    private void orderSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderSelectActionPerformed
        
        if(selectSqu.isSelected())
        {
            orderText=orderText+orderByField.getSelectedItem().toString()+" "+sequenceOfOrder.getSelectedItem().toString()+",";
        }
        else
        {
            orderText=orderText+orderByField.getSelectedItem().toString()+",";
        }
        //orderText=orderText.substring(0,orderText.length()-1);
        orderTextArea.setText(orderText.substring(0,orderText.length()-1));
    }//GEN-LAST:event_orderSelectActionPerformed

    private void selectGroupByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectGroupByActionPerformed
        if(selectGroupBy.isSelected())
        {
            System.out.println("I am ON");
            selectGroupBy.setText(" ON ");
        }
        else
        {
            selectGroupBy.setText("OFF");
        }
    }//GEN-LAST:event_selectGroupByActionPerformed

    private void havingOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_havingOpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_havingOpActionPerformed

    private void addColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColumnActionPerformed
        DefaultTableModel tbmod=(DefaultTableModel)table1.getModel();
        tbmod.addRow(new Object[]{"","","",false});
    }//GEN-LAST:event_addColumnActionPerformed

    private void removeColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColumnActionPerformed
        DefaultTableModel tbmod=(DefaultTableModel)table1.getModel();
        if(table1.getSelectedRow()==-1)
        {
            if(table1.getColumnCount()==0)
            {
                err_msg.setText("Table is Empty ....");
            }
            else
            {
                err_msg.setText("You must select one row ....");
            }
        }
        else
        {
            tbmod.removeRow(table1.getSelectedRow());
        }
    }//GEN-LAST:event_removeColumnActionPerformed

    private void removeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllActionPerformed
        vector.removeAllElements();
        selectedfield.setListData(vector);
    }//GEN-LAST:event_removeAllActionPerformed

    private void addAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAllActionPerformed

        vector2.clear();
        for(int j=0;j<dim.size();j++)
        {
            vector2.addElement(dim.get(j));
        }
        selectedfield.setListData(vector2);
    }//GEN-LAST:event_addAllActionPerformed

    private void LshiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LshiftActionPerformed
        //DefaultListModel dim2=new DefaultListModel();

        if(justonce<=1)
        {

            justonce++;
        }
        List b=selectedfield.getSelectedValuesList();
        for(int j=0;j<b.size();j++)
        {
            System.out.println(b.get(j));
            //dim2.removeElementAt(b[j]);
            vector2.remove(b.get(j));
            //selectedfield.remove(b[j]);
        }
        selectedfield.setListData(vector2);
    }//GEN-LAST:event_LshiftActionPerformed

    private void RshiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RshiftActionPerformed

        //DefaultListModel dim=new DefaultListModel();

        List b=field.getSelectedValuesList();
        System.out.println("in right shift"+dim.size());
        if(vector.size()<dim.size())
        {
            for(int j=0;j<b.size();j++)
            {
                System.out.println(b.get(j));
                vector.addElement(b.get(j));
                //dim.addElement(b.get(j));
            }
            //selectedfield.setModel(dim);
            selectedfield.setListData(vector);
            vector2.clear();
            vector2.addAll(vector);
            for(int j=0;j<vector2.size();j++)
            {
                System.out.println(vector2.get(j));
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Limit is exceded");
        }
    }//GEN-LAST:event_RshiftActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Lshift;
    private javax.swing.JButton Rshift;
    private javax.swing.JButton addAll;
    private javax.swing.JButton addColumn;
    private javax.swing.JButton andBtn1;
    private javax.swing.JLabel err_msg;
    private javax.swing.JList field;
    private javax.swing.JComboBox fun_field;
    private javax.swing.JComboBox functionCombo;
    private javax.swing.JComboBox groupByField;
    private javax.swing.JComboBox havingOp;
    private javax.swing.JTextField havingValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JComboBox oprator1;
    private javax.swing.JButton orBtn1;
    private javax.swing.JComboBox orderByField;
    private javax.swing.JButton orderSelect;
    private javax.swing.JTextArea orderTextArea;
    private javax.swing.JButton removeAll;
    private javax.swing.JButton removeColumn;
    private javax.swing.JComboBox rest_field;
    private javax.swing.JTextField rest_txt1;
    private javax.swing.JComboBox schema;
    private javax.swing.JButton selectExe;
    private javax.swing.JRadioButton selectGroupBy;
    private javax.swing.JRadioButton selectSqu;
    private javax.swing.JList selectedfield;
    private javax.swing.JComboBox sequenceOfOrder;
    private javax.swing.JComboBox table;
    private javax.swing.JTable table1;
    // End of variables declaration//GEN-END:variables
}
